GearType<-read.csv('Tables\\GearType.csv')
save(GearType,file='data\\GearType.rda')
Menu<-read.csv('Tables\\Menu.csv')
save(Menu,file='data\\Menu.rda')
library(XIVBLM)
MainStatValues
SecondaryMinorValues
SecondaryStatCapValues
WDValues
MainStatValues<-as.matrix(read.csv('Tables\\MainStatValues.csv',row.names = 1))
save(MainStatValues,file='data\\MainStatValues.rda')
SecondaryMinorValues<-as.matrix(read.csv('Tables\\SecondaryMinorValues.csv',row.names = 1))
save(SecondaryMinorValues,file='data\\SecondaryMinorValues.rda')
SecondaryStatCapValues<-as.matrix(read.csv('Tables\\SecondaryStatCapValues.csv',row.names = 1))
save(SecondaryStatCapValues,file='data\\SecondaryStatCapValues.rda')
WDValues<-as.matrix(read.csv('Tables\\WDValues.csv',row.names = 1))
save(WDValues,file='data\\WDValues.rda')
MainStatValues
install.packages('devtools')
library(XIVBLM)
MainStatValues
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
Menu<-read.csv('Tables\\Menu.csv')
save(Menu,file='data\\Menu.rda')
library(XIVBLM)
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
View(Food)
PPSTable<-read.csv('Tables\\PPSTable.csv')
save(PPSTable,file='data\\PPSTable.rda')
devtools::load_all(".")
library(XIVBLM)
PPSTable
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
library(XIVBLM)
GearFile<-file.choose()
MateriaFrame<-data.frame()
MateriaFrame<-MateriaFrameGenerate(GearFile)
GearFile<-gsub('.csv','',basename(GearFile))
Food<-FoodFrame(Menu=Menu,minIlvl=max(Menu$Ilvl))
StatWeightChart<-read.csv('Tables\\StatWeightStart.csv')
for(i in 1:nrow(StatWeightChart)){
Set<-StatWeightGearSet(MateriaFrame,
DHWeight = StatWeightChart$InitialDHWeight[i],
CritWeight = StatWeightChart$InitialCritWeight[i],
DetWeight = StatWeightChart$InitialDetWeight[i],
SSWeight = StatWeightChart$InitialSSWeight[i]
)
print(paste(sep="","Running set ",i,"/",nrow(StatWeightChart),":",
" DH=",StatWeightChart$InitialDHWeight[i],
" Crit=",StatWeightChart$InitialCritWeight[i],
" Det=",StatWeightChart$InitialDetWeight[i],
" SS=",StatWeightChart$InitialSSWeight[i]))
Set<-BiSLoop(MateriaFrame,Food,Set)
for(slot in 5:15){
StatWeightChart[i,slot]<-ItemReturnString(MateriaFrame,Set[slot-4])
}
Attributes<-Food.Apply(MateriaFrame,Set,Food)
for(slot in 16:23){
StatWeightChart[i,slot]<-Attributes[slot-15]
}
}
rm(i,slot,Attributes,Set)
StatWeightChart<-StatWeightChart[order(-as.numeric(StatWeightChart$DPS)),]
OutputName<-paste("GearSetOutcomes",GearFile)
#write.csv(StatWeightChart,paste(OutputName,' (Debug).csv',sep=''),row.names = FALSE)
if(length(MateriaFrame)==0){stop('GearFrame Length = 0')}else{
write.csv(StatWeightChart[!(duplicated(StatWeightChart[,17:23])),c(5:23)],paste(OutputName,'.csv',sep=''),row.names = FALSE)
print(paste(OutputName,'Complete'))
}
rm(OutputName,GearFile)
